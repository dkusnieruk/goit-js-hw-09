{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAsCMC,EAAUC,SAASC,kBAAmB,SAEtCC,EAASF,SAASC,kBAAmB,QAErCE,EAAUH,SAASC,kBAAmB,UAE5BD,SAASI,cAAe,UAE9BC,iBAAkB,SAAO,SAACC,GAClCA,EAAMC,iBACN,IAAMC,EAAWL,EAAU,GAAGM,MACxBC,EAAMR,EAAQ,GAAGO,MACjBE,EAAKZ,EAAS,GAAGU,MAGrBG,EAAU,EAIVC,EAAQC,aAAY,WAGpB,IAAMC,GAAaJ,IAASD,IAD5BE,GAAW,GACgC,GAC3CI,QAAQC,IAAIF,GACE,IAAIG,SAAS,SAACC,EAASC,GAEfC,KAAKC,SAAW,GAEpCH,EACEI,EAAA1B,GAAS2B,OAAOC,QACd,uBAAqCC,OAAdd,EAAQ,QAAgBc,OAAVX,EAAU,MAC/C,CACAY,MAAO,QACPC,gBAAgB,EAChBH,QAAS,CACLI,WAAa,QACbC,UAAW,YAMnBV,EACEG,EAAA1B,GAAS2B,OAAOC,QACd,sBAAoCC,OAAdd,EAAQ,QAAgBc,OAAVX,EAAU,MAC9C,CACAY,MAAO,QACPC,gBAAgB,EAChBH,QAAS,CACLI,WAAa,MACbC,UAAW,W,IAWjBlB,GAAWJ,GACXuB,cAAclB,E,GAEnBH,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n\n// const promise =function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     console.log('fullfill');\n//     Notiflix.Notify.warning(\n//       `✅ Fulfilled promise ${position} in ${delay}ms`,\n//       {\n//       width:`300px`,\n//       useFontAwesome: true,\n//       warning: {\n//           background: `green`,\n//           textColor:`white`,\n//       }\n//       },\n//     );\n//     // Fulfill\n//   } else {\n//     console.log('reject');\n//     Notiflix.Notify.warning(\n//       `❌ Rejected promise ${position} in ${delay}ms`,\n//       {\n//       width:`300px`,\n//       useFontAwesome: true,\n//       warning: {\n//           background: `red`,\n//           textColor:`white`,\n//       }\n//       },\n//     );\n//     // Reject\n//   }\n// }\n\n\n\nconst getDelay= document.getElementsByName(`delay`);\n\nconst getStep= document.getElementsByName(`step`);\n\nconst getAmount=document.getElementsByName(`amount`);\n\nconst getButton=document.querySelector(`button`);\nlet timerId;\ngetButton.addEventListener(`click`,(event)=>{\n  event.preventDefault();\n  const position = getAmount[0].value;\n  const delay=getStep[0].value;\n  const step=getDelay[0].value;\n  \n\nlet counter = 0;\n\n\n\nlet timer = setInterval(function() {\n  \n    counter += 1;\n    const getOutput = +step + (+delay*(counter-1));\n    console.log(getOutput);\nconst obietnica = new Promise ((resolve, reject)=>{\n  \n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve){\n      resolve(\n        Notiflix.Notify.warning(\n          `✅ Fulfilled promise ${counter} in ${getOutput}ms`,\n          {\n          width:`300px`,\n          useFontAwesome: true,\n          warning: {\n              background: `green`,\n              textColor:`white`,\n          }\n          },\n        )\n      )\n    } else {\n      reject(\n        Notiflix.Notify.warning(\n          `❌ Rejected promise ${counter} in ${getOutput}ms`,\n          {\n          width:`300px`,\n          useFontAwesome: true,\n          warning: {\n              background: `red`,\n              textColor:`white`,\n          }\n          },\n        )\n        \n      )\n    }\n\n  \n})\n\n    if (counter >= position) {\n        clearInterval(timer);\n    }\n}, delay);\n  \n});\n   \n// setTimeout(()=>{\n//   createPromise(position,delay)\n  \n// }, step);\n// const isSuccess = Math.random() > 0.3;\n\n\n\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$getDelay","document","getElementsByName","$ce04d3a99e08e73b$var$getStep","$ce04d3a99e08e73b$var$getAmount","querySelector","addEventListener","event","preventDefault","position","value","delay","step","counter","timer","setInterval","getOutput","console","log","Promise","resolve","reject","Math","random","$parcel$interopDefault","Notify","warning","concat","width","useFontAwesome","background","textColor","clearInterval"],"version":3,"file":"03-promises.1aec14d7.js.map"}